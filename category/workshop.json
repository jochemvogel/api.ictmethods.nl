[
	{
		"name": "Brainstorm",
		"why": "Generate and develop new ideas.",
		"how": "Bring people together to spark creativity and use a creativity technique to ensure a creative flow among the participants. Accept any ideas; filtering can be done in a later step. Build upon each other’s ideas, even bad ones. Avoid idea killers like early criticism.",
		"practice": "Companies use brainstorming techniques like nominal group technique or directed brainstorming.",
		"ingredients": [
			"An activity plan.",
			"A shared problem statement and rules.",
			"An anything goes mindset: bad ideas also count as a contribution."
		],
		"category": "workshop",
		"slug": "brainstorm",
		"phases": ["problem definition", "analysis"]
	},
	{
		"name": "Business case exploration",
		"why": "Maximize the outcome of your efforts or investment.",
		"how": "Analyse the most viable options or scenarios for your problem or opportunity. In doing so, calculate the ‘value’ of each scenario and define the risks involved. Identify the type of value your project will deliver (e.g. cost reduction, revenue generation, risk reduction or regulatory compliance). Take all costs and revenues into account. Some revenues or outcomes are more difficult to quantify but should also be considered. Recognise that future costs and gains may be lowered due to inflation and interest (e.g. by calculating ‘net present value’).",
		"practice": "Most companies only detail the one or two most viable business cases.",
		"ingredients": [
			"Take all costs and revenues into account.",
			"Some revenues or outcomes are more difficult to quantify but should be taken into account as well.",
			"Take into account that costs and gains in future weight lower due to inflation and interest (e.g. by calculating net present value)",
			"Use a tool or template like Business Model Canvas."
		],
		"category": "workshop",
		"slug": "business-case-exploration",
		"phases": ["problem definition"]
	},
	{
		"name": "Code review",
		"why": "With many eyeballs on the code, all bugs are shallow. Colleagues can help you find bugs and improve the quality of your source code.",
		"how": "Code reviews can be done in many ways. The code can be presented on a big screen, so the entire team can do the review together. You can also ask one or two peers to simply sit behind your desk while you talk them through your code. Code analysis can also be a part of the workflow (e.g. every commit must be reviewed by someone else).",
		"practice": "Code review sessions are often incorporated into software development projects. In Scrum, code reviews can be part of the ‘definition of done’. Pair programming can also be an effective way to let your work be continuously reviewed by a peer.",
		"ingredients": [
			"Peers with a critical view.",
			"A willingness to improve weak points in your code.",
			"Code standards, a code style guide, checklists, etc."
		],
		"category": "workshop",
		"slug": "code-review",
		"phases": ["realisation"]
	},
	{
		"name": "Decomposition",
		"why": "Breaking a complex IT system or problem into smaller parts ensures its maintainability and robustness, and facilitates cooperation in large-scale software projects.",
		"how": "Create a model of your system by breaking it into components, and then defining relationships. You can define models from different perspectives (e.g. static, dynamic and physical views).",
		"practice": "Large companies use a wide repertoire of techniques (e.g. UML, SysML, C4 Model), while smaller companies often use a subset of these techniques. The extent to which these techniques are used depends on the needs in a project and can differ for various parts of the software.",
		"ingredients": [
			"A ‘divide and conquer’ mindset.",
			"An appropriate modelling technique, like UML.",
			"Knowledge of some (not all) of the requirements.",
			"Knowledge of the end system and what changes are expected in the future (variation points)."
		],
		"category": "workshop",
		"slug": "decomposition",
		"phases": ["design"]
	},
	{
		"name": "Gap analysis",
		"why": "Compare an actual situation to an ideal or desired situation. The gap analysis can be used to create plans to bridge the gaps.",
		"how": "You can apply gap analysis to many things: situations, products, processes or performance. It is important to make a clear overview of the differences between the actual and desired situations. That overview can be presented in a two-column table.",
		"practice": "A gap analysis is often performed before developing a new product. An identified gap can be used as an opportunity in a SWOT analysis.",
		"ingredients": [
			"An overview of the current situation (based on data).",
			"An idea about the desired situation (based on ideas).",
			"A representation of the design gap."
		],
		"category": "workshop",
		"slug": "gap-analysis",
		"phases": ["analysis"]
	},
	{
		"name": "IT architecture sketching",
		"why": "Defining the IT architecture is complex and requires contributions from and interactions between software designers and/or architects. Sketching facilitates these discussions.",
		"how": "Come together around a whiteboard and draw the high-level architecture based upon discussion before and during the drawing process. Stay away from details, unless they are important for the overall design.",
		"practice": "Most companies use architecture sketching at the beginning of the design process, and as a kick-off for major changes to a part of the architecture.",
		"ingredients": [
			"The appropriate people (3–5 people with the required expertise is ideal).",
			"An understanding of the top-level requirements before starting.",
			"A whiteboard and markers.",
			"A camera to photograph the resulting sketch to detail later."
		],
		"category": "workshop",
		"slug": "it-architecture-sketching",
		"phases": ["design"]
	},
	{
		"name": "Multi-criteria decision making",
		"why": "Improve the quality of complex decisions",
		"how": "Most decision-making models distinguish many phasess. In general, you will have a preparation phases to investigate the different alternatives, the criteria and their weight. Also involve the relevant stakeholders. After that, the criteria can be evaluated per option, leading to the favourite option being chosen.",
		"practice": "Almost all IT projects involve complex decisions. In methods like Scrum and lean, the decisions are postponed as late as possible to have more information for making the right decision or to change a decision if it does not work.",
		"ingredients": [
			"Time to iterate between judging options and adjusting criteria.",
			"A good set of initial requirements/criteria as a prerequisite.",
			"Reliable information about the different alternatives.",
			"A lack of prejudice.",
			"A technique for weighting criteria against options like a ‘decision tree’."
		],
		"category": "workshop",
		"slug": "multi-criteria-decision-making",
		"phases": ["design"]
	},
	{
		"name": "Prototyping",
		"why": "Develop, evaluate or communicate a concept, design or problem solution to make your ideas concrete, to learn whether they work and to discover the technical limitations or possibilities.",
		"how": "Start by determining what you want to learn from your prototype. Determine which kind of prototype suits your needs best: for example, you can create a paper or electronic prototype of your UI, a proof of concept or a proof of principle.",
		"practice": "Prototypes can be used to talk about your ideas with your client, but can also be used to test how well a technology can be applied in your situation, before you fully plunge into it. Some developers create many throw-away prototypes to find a novel solution direction; this is called ‘thinkering’.",
		"ingredients": [
			"A willingness to tackle the riskiest and difficult parts first.",
			"The ability to ‘kill your darlings’ if the feedback or findings are negative.",
			"A clear view of what you would like to learn from your prototype."
		],
		"category": "workshop",
		"slug": "prototyping",
		"phases": ["design", "prototyping"]
	},
	{
		"name": "Requirements prioritization",
		"why": "Determine which candidate requirements should be implemented first.",
		"how": "Gather requirements by interviewing and studying stakeholders and their contexts. Determine whether requirements are clear and complete. Identify priorities together with stakeholders. Requirement lists could include requirements for the user, design, context, architecture, technical aspects or performance. Requirements can be written as a list, or explained in the form of user stories.",
		"practice": "Requirement lists are typical for large projects and are used for release planning. To minimize risk during development, the most important high-risk requirements are implemented first.",
		"ingredients": [
			"An analytic view.",
			"The ability to write clear, unambiguous requirements.",
			"A way to indicate priorities (e.g. MoSCoW or a backlog)."
		],
		"category": "workshop",
		"slug": "requirements-prioritization",
		"phases": ["analysis"]
	},
	{
		"name": "Root cause analysis",
		"why": "Understand why a problem occurs and prevent it from happening again.",
		"how": "Systematically identify the possible factors that could have led to the problem. For each factor, determine whether it is symptom of a deeper cause. Classify the factors and define measures to prevent the problem from happening again. Do not stop too quickly; ensure that there is no deeper cause.",
		"practice": "Companies use many techniques (e.g. fishbone diagram, problem tree, 5x why). One example is a software company that put more and more effort into testing because of bad product quality. By using 5X Why, they discovered that the root cause was over-optimistic scheduling that led to stress for the developers.",
		"ingredients": [
			"A structured approach.",
			"No initial bias about possible causes or solutions.",
			"A diverse group of knowledge holders to help (e.g. security, software, business, user perspective)."
		],
		"category": "workshop",
		"slug": "root-cause-analysis",
		"phases": ["problem definition", "analysis"]
	}
]
