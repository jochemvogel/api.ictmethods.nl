[
	{
		"name": "A/B testing",
		"why": "A minor change in a design may alter user behaviour in ways that are hard to detect in a usability test. An A/B test allows you to compare real-world user behaviour across different versions of a product.",
		"how": "In an A/B test, the user is presented with one of two versions of an interactive product. Remote software records metrics for user behaviour. These metrics are compared between the two versions to see which alternative is better. Sometimes, more than two alternatives are tested: A/B/X testing.",
		"practice": "Google does a lot of A/B testing on its search services. The tiniest details can matter to Google because they have so many users. Some companies also use the A/B experimental design for testing concepts, rather than finished products.",
		"ingredients": [
			"Specialised software.",
			"Reliable metrics.",
			"A large number of users."
		],
		"category": "lab",
		"image": "https://ictresearchmethods.nl/images/thumb/5/5b/A_B_testing.png/250px-A_B_testing.png",
		"slug": "a-b-testing",
		"phase": ["realisation"]
	},
	{
		"name": "Component test",
		"why": "Test a subsystem or component in isolation to ensure its correctness before integrating it with other components or modules.",
		"how": "In a component test, you test whole components or subsystems, instead of the atomic chunks of code that you test in unit tests. Test the component against its input and output relations (e.g. specified via interfaces). Component testing compares the outputs with expected results given pre-defined inputs.",
		"practice": "Companies that use component testing want simple and clear interfaces between the components, which they view as an essential precondition for successful component testing. Microservices are a way to accomplish this and are more commonly used nowadays.",
		"ingredients": [
			"A system that is split up into separate subsystems to allow for component testing.",
			"Access to and an understanding of the interfaces of the component under test.",
			"Drivers and stubs to simulate the behaviour of other components."
		],
		"category": "lab",
		"image": "https://ictresearchmethods.nl/images/thumb/5/5e/Component_test.png/250px-Component_test.png",
		"slug": "component-test",
		"phase": ["realisation"]
	},
	{
		"name": "Computer simulation",
		"why": "Computer simulations are used when a real-world process, system or event situation is not available or feasible.",
		"how": "A computer simulation requires modelling the environment or the hardware. Hardware that is not available, that can break during testing or that is too expensive can be simulated in such a way that other components in the system do not know that a stub is being used instead of the real hardware. A simulation allows you to run an experiment many times with different parameters.",
		"practice": "To work on signal processing algorithms, raw sensor data can be simulated by sending a list of simulated readings instead of using a real sensor during development",
		"ingredients": [
			"A design of the model.",
			"The ability to develop a model of the real hardware or situation.",
			"A simulation of the runtime environment.",
			"An evaluation of the simulation (i.e. does it work according to the intended model?)."
		],
		"category": "lab",
		"image": "https://ictresearchmethods.nl/images/thumb/e/e6/Computer_simulation.png/250px-Computer_simulation.png",
		"slug": "computer-simulation",
		"phase": ["realisation"]
	},
	{
		"name": "Data analytics",
		"why": "Gain insights by measuring and analysing data. Researching a dataset can give you useful quantitative information about the topic of interest.",
		"how": "Collect data that is relevant for your area of research and analyse it. Split your dataset into a training set and a test dataset. Find an algorithm that works with the training data and check whether it is reliable with the test data.",
		"practice": "Applied data science is now done in many fields. For example, it is used in the business domain to predict customer behaviour.",
		"ingredients": [
			"A data collection plan.",
			"Analysis tooling (e.g. statistical tooling or machine learning algorithms).",
			"A critical eye on the validity of your data and your conclusions",
			"Comprehensive data visualisations"
		],
		"category": "lab",
		"image": "https://ictresearchmethods.nl/images/thumb/e/ea/Data_analytics.png/250px-Data_analytics.png",
		"slug": "data-analytics",
		"phase": ["analysis", "design"]
	},
	{
		"name": "Hardware validation",
		"why": "Hardware does not always perform according to its specifications. Hardware validation ensures that the hardware performs as expected and excludes hardware as a source of errors.",
		"how": "Typically, hardware is first tested in a controlled lab environment. For example, you can compare sensor measurements to the actual values given by another reliable system (ground truth). Sometimes, hardware also needs to be calibrated. When hardware works in the lab, it can be validated in the actual application context.",
		"practice": "After new hardware is ordered, it is validated before it is integrated into a larger system. It is difficult to find the source of errors after it is integrated with other components and used with complex software.",
		"ingredients": [
			"Access to the hardware.",
			"The specifications and/or requirements for the hardware.",
			"A way to determine the ‘ground truth’ or desired behaviour."
		],
		"category": "lab",
		"image": "https://ictresearchmethods.nl/images/thumb/f/fb/Hardware_validation.png/250px-Hardware_validation.png",
		"slug": "hardware-validation",
		"phase": ["realisation"]
	},
	{
		"name": "Non-functional test",
		"why": "Test the operating conditions under which the system delivers its intended functions.",
		"how": "‘Non-functional’ refers to aspects of the software (e.g. scalability or security) that may not be related to a specific function or user action (e.g. How many people can log in at once?). You need to test whether the system fulfils requirements related to usability, reliability, performance and supportability",
		"practice": "To ensure that users accept a solution, companies confirm that the product not only offers the required functions, but also does so in a practical and safe way.",
		"ingredients": [
			"(Customer) test situations.",
			"An open mind about what compatibility and recovery mean.",
			"Test tools to assess availability and performance.",
			"A good idea about capacity, scalability and elasticity needs."
		],
		"category": "lab",
		"image": "https://ictresearchmethods.nl/images/thumb/3/39/Non-functional_test.png/250px-Non-functional_test.png",
		"slug": "non-functional-test",
		"phase": ["realisation"]
	},
	{
		"name": "Security test",
		"why": "Understand the security risks of an IT system.",
		"how": "Find and prioritise vulnerabilities in systems or services and determine their impact on the confidentiality, integrity and availability of information. Impacts also include safety risks and privacy risks. Assess controls that mitigate risks. Several methods may further aid a security test: guideline conformity analysis, a configuration review, penetration testing or red team/ blue team plays.",
		"practice": "Companies use security tests to uncover vulnerabilities in systems to prevent data leaks or system failures (and bad press). In some cases, security tests are required to prove compliance with certain standards or regulations.",
		"ingredients": [
			"Test tooling.",
			"A hacker’s attitude.",
			"A focus on intentional threats and threat actors."
		],
		"category": "lab",
		"image": "https://ictresearchmethods.nl/images/thumb/7/70/Security_test.png/250px-Security_test.png",
		"slug": "security-test",
		"phase": ["realisation"]
	},
	{
		"name": "System test",
		"why": "Solve problems before your system goes into production and demonstrate that the system operates according to its requirements.",
		"how": "System testing evaluates the complete, integrated system against its requirements. Create a test plan based on the requirements. It should contain test cases with expected outcomes. Over one or more test rounds, test the system and compare the results with the expected outcomes. Each test round ends with a conclusion (pass or fail) for the system or parts of it.",
		"practice": "Large companies have dedicated test teams separate from the developers, as finding bugs requires a different competence and mindset than developing an IT system.",
		"ingredients": [
			"Quite a bit of time to do a lot of tests.",
			"A bug-killing mindset (which is different from showing that your system works).",
			"Test scenarios with both happy flow and specific cases (e.g. for error handling).",
			"Access to all the system’s interfaces.",
			"A test framework (for automated testing)."
		],
		"category": "lab",
		"image": "https://ictresearchmethods.nl/images/thumb/0/00/System_test.png/250px-System_test.png",
		"slug": "system-test",
		"phase": ["realisation"]
	},
	{
		"name": "Unit test",
		"why": "Find certain types of bugs as early as possible and ensure your code keeps running after a change.",
		"how": "Define one or more tests for each ‘atomic part’ of the code (e.g. a method or function). The unit should be tested in isolation.",
		"practice": "Many companies use unit tests as part of their continuous integration environment. With every build, all unit tests are run to get an overview of the quality of the software and possible bugs. Some companies define the unit tests first and then create the code, leading to successful unit tests (Test-Driven Development).",
		"ingredients": [
			"Unit test tooling (present in all modern IDEs).",
			"A disciplined mindset to cover all important cases.",
			"Special focus on calculations and more algorithmic parts of the code.",
			"Going well beyond the ‘happy flow’ (e.g. focus on boundary cases and exceptions).",
			"An upfront definition of the code coverage target for each part of the code."
		],
		"category": "lab",
		"image": "https://ictresearchmethods.nl/images/thumb/5/52/Unit_test.png/250px-Unit_test.png",
		"slug": "unit-test",
		"phase": ["realisation"]
	},
	{
		"name": "Usability testing",
		"why": "Detect problems users have with your solution and correct them before the system goes live.",
		"how": "You can use a paper or electronic prototype of your solution to test your application in an early stage. Later, you can use your actual solution and test things like interface, performance and how a user executes a typical task. Users are usually asked to think aloud, but you can also get results from automatic measurement tools (e.g. timers, eye trackers, mouse movement tracking and text logging).",
		"practice": "Because a complete system cannot be tested far before its release, companies typically test parts or early versions in earlier stages, so there is still time to fix things as needed..",
		"ingredients": [
			"A prototype (paper or electronic).",
			"A quiet room with the user.",
			"Tools for automatically gathering data (may be embedded in your solution).",
			"Video or audio recording equipment."
		],
		"category": "lab",
		"image": "https://ictresearchmethods.nl/images/thumb/9/91/Usability_testing.png/250px-Usability_testing.png",
		"slug": "usability-testing",
		"phase": ["realisation"]
	}
]
